# Autonomous Income Generator

A self-sustaining, income-generating Python application that operates autonomously with minimal user intervention after initial setup.

## Table of Contents

1. [Overview](#overview)
2. [Features](#features)
3. [Income Generation Strategies](#income-generation-strategies)
4. [System Architecture](#system-architecture)
5. [Installation](#installation)
6. [Configuration](#configuration)
7. [Running the Application](#running-the-application)
8. [Monitoring](#monitoring)
9. [Security Considerations](#security-considerations)
10. [Extending the Application](#extending-the-application)
11. [Troubleshooting](#troubleshooting)
12. [Frequently Asked Questions](#frequently-asked-questions)
13. [Legal and Ethical Considerations](#legal-and-ethical-considerations)

## Overview

The Autonomous Income Generator is a Python application designed to generate income through various online activities with minimal human intervention. It leverages multiple strategies, web automation, and AI capabilities to find and complete income-generating tasks autonomously.

## Features

- **Fully Autonomous Operation**: Runs continuously and manages its income-generating activities with no manual intervention required after setup.
- **Multiple Income Strategies**: Implements various methods of generating income including content creation, freelancing, and paid surveys.
- **Web Automation**: Utilizes advanced browser automation with anti-detection capabilities.
- **AI Integration**: Uses LLM APIs to generate content, answer surveys, and make intelligent decisions.
- **Comprehensive Monitoring**: Provides a web interface to track income, active tasks, and system performance.
- **Extensible Architecture**: Easily add new income strategies through the modular plugin system.
- **Secure Credential Management**: Stores all sensitive information in a .env file with proper security practices.
- **Detailed Logging**: Captures all system activities and income generation for later analysis.

## Income Generation Strategies

The application implements the following income generation strategies:

### Content Creation Strategy

This strategy generates written content and publishes it across various platforms to build an audience and generate income through Patreon.

- Creates original content using LLM APIs
- Publishes content on platforms like Novel.net, Webnovel.com, and Scribblehub.com
- Manages a Patreon account for monetization
- Updates patrons with new content consistently
- Tracks subscribers and earnings

### Freelancing Strategy

This strategy searches for, bids on, and completes freelance coding tasks on platforms like Upwork.

- Automatically searches for suitable jobs based on configurable criteria
- Evaluates job postings to determine fit and potential profitability
- Generates custom proposals for each job
- Communicates with clients
- Completes tasks autonomously using LLM assistance
- Delivers completed work

### Paid Surveys Strategy

This strategy finds and completes online surveys from various survey platforms.

- Works with multiple survey platforms (EuroClix, PanelClix, Toluna, SurveyJunkie)
- Selects surveys based on reward and estimated completion time
- Uses a consistent persona profile to complete surveys
- Handles screening questions and qualification checks
- Tracks earnings across all platforms

## System Architecture

The application follows a modular architecture with the following key components:

1. **Core System**:
   - `AppController`: Main entry point and orchestration
   - `ConfigManager`: Handles .env and configuration
   - `MonitoringSystem`: Tracks performance and logs
   - `ModuleLoader`: Dynamically loads income strategies

2. **Income Strategies**:
   - `IncomeStrategy`: Base class for all income strategies
   - Strategy implementations (Content Creation, Freelancing, Paid Surveys)

3. **Resource Managers**:
   - `APIManager`: Handles LLM API interactions
   - `DatabaseManager`: Manages data persistence
   - `FinanceManager`: Tracks income/expenses

4. **Web Automation**:
   - `BrowserManager`: Manages browser instances
   - `CaptchaSolver`: Solves CAPTCHAs
   - Site interactors (Upwork, Patreon, etc.)

## Installation

### Prerequisites

- Python 3.8 or higher
- MySQL database server
- Chrome browser installed (for selenium automation)
- API keys for the LLMs you plan to use

### Steps

1. **Clone the repository**:
   ```bash
   git clone https://github.com/yourusername/autonomous-income-generator.git
   cd autonomous-income-generator
   ```

2. **Create a virtual environment**:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

3. **Install dependencies**:
   ```bash
   pip install -e .
   ```

   This will install all required dependencies listed in the setup.py file.

4. **Set up the database**:
   ```bash
   mysql -u root -p
   ```

   In the MySQL shell:
   ```sql
   CREATE DATABASE income_generator;
   CREATE USER 'income_user'@'localhost' IDENTIFIED BY 'choose_a_secure_password';
   GRANT ALL PRIVILEGES ON income_generator.* TO 'income_user'@'localhost';
   FLUSH PRIVILEGES;
   EXIT;
   ```

5. **Configure the application**:
   Create a `.env` file in the root directory by copying the example:
   ```bash
   cp .env.example .env
   ```

   Then edit the .env file with your settings (see Configuration section).

6. **Run initial setup**:
   ```bash
   python -m app --setup
   ```

## Configuration

All configuration is managed through the `.env` file. Here's a breakdown of the key configuration sections:

### Financial Accounts

```
FINANCIAL_BTC_BALANCE=500.0
FINANCIAL_AMAZON_BALANCE=200.0
FINANCIAL_AMAZON_CURRENCY=EUR
```

- `BTC_BALANCE`: Your initial Bitcoin balance in USD
- `AMAZON_BALANCE`: Your initial Amazon gift card balance
- `AMAZON_CURRENCY`: Currency of your Amazon balance

### LLM API Keys

```
LLM_API_CLAUDE_API_KEY=your_claude_api_key_here
LLM_API_DEEPSEEK_API_KEY=your_deepseek_api_key_here
LLM_API_GEMMA_API_KEY=your_gemma_api_key_here
LLM_API_USE_LOCAL_GEMMA=true
LLM_API_LOCAL_GEMMA_ENDPOINT=http://127.0.0.1:8000/generate
LLM_API_DEFAULT_MODEL=claude
LLM_API_TEMPERATURE=0.7
LLM_API_RATE_LIMIT_DELAY=1.0
```

- Configure your API keys for the LLMs you plan to use
- Set which LLM to use as default
- Configure local Gemma if you're running it yourself

### Database Configuration

```
DATABASE_HOST=localhost
DATABASE_PORT=3306
DATABASE_USER=income_user
DATABASE_PASSWORD=your_password_here
DATABASE_NAME=income_generator
```

- Configure your MySQL database connection

### Website Credentials

```
WEBSITE_CREDENTIALS_UPWORK_USERNAME=your_upwork_username
WEBSITE_CREDENTIALS_UPWORK_PASSWORD=your_upwork_password
WEBSITE_CREDENTIALS_PATREON_USERNAME=your_patreon_username
WEBSITE_CREDENTIALS_PATREON_PASSWORD=your_patreon_password
```

- Add credentials for each platform you want to use
- The application will only use platforms for which credentials are provided

### Strategy Settings

```
STRATEGIES_CONTENT_CREATION_ENABLED=true
STRATEGIES_FREELANCING_ENABLED=true
STRATEGIES_PAID_SURVEYS_ENABLED=true
```

- Enable or disable specific income strategies
- Each strategy has additional configuration options (see .env.example)

## Running the Application

Start the application with:

```bash
python -m app
```

Use the `--debug` flag for more verbose logging:

```bash
python -m app --debug
```

Specify a different configuration file:

```bash
python -m app --config custom.env
```

### Running as a Service

For continuous operation, you may want to run the application as a system service.

#### Linux (systemd)

Create a service file:

```bash
sudo nano /etc/systemd/system/income-generator.service
```

Add the following content:

```
[Unit]
Description=Autonomous Income Generator
After=network.target

[Service]
Type=simple
User=your_username
WorkingDirectory=/path/to/autonomous-income-generator
ExecStart=/path/to/autonomous-income-generator/venv/bin/python -m app
Restart=always
RestartSec=5
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=income-generator

[Install]
WantedBy=multi-user.target
```

Enable and start the service:

```bash
sudo systemctl enable income-generator
sudo systemctl start income-generator
```

Check the status:

```bash
sudo systemctl status income-generator
```

#### Windows

Use NSSM (Non-Sucking Service Manager) to create a Windows service:

1. Download NSSM from https://nssm.cc/
2. Open Command Prompt as Administrator
3. Run the following command:

```
nssm.exe install IncomeGenerator "C:\path\to\autonomous-income-generator\venv\Scripts\python.exe" "-m app"
```

4. Set the service to start automatically and start it:

```
nssm.exe set IncomeGenerator Start SERVICE_AUTO_START
nssm.exe start IncomeGenerator
```

## Monitoring

The application includes a web-based monitoring interface that provides real-time information about:

- Total income generated
- Active strategies
- Recent income transactions
- Performance metrics

By default, the monitoring interface is available at:

```
http://localhost:8080
```

You can change the port in the .env file:

```
MONITORING_WEB_PORT=8080
```

## Security Considerations

The application handles sensitive credentials and financial information. Follow these security best practices:

1. **Protect your .env file**:
   - Set restrictive file permissions: `chmod 600 .env`
   - Never commit it to version control
   - Consider using a secrets manager for production

2. **Use strong, unique passwords** for all accounts used by the application

3. **Run on a dedicated machine or virtual environment** to isolate it from other applications

4. **Regularly backup your database** to prevent data loss

5. **Keep dependencies updated** to protect against security vulnerabilities:
   ```bash
   pip install -U -e .
   ```

6. **Restrict network access** to the monitoring interface (e.g., with a firewall or reverse proxy)

## Extending the Application

The application is designed to be extensible. Here's how to add new components:

### Adding a New Income Strategy

1. Create a new directory under `app/income_strategies/` for your strategy
2. Create a `main.py` file with a class that inherits from `IncomeStrategy`
3. Implement the required methods (see examples in existing strategies)
4. Add appropriate configuration to your `.env` file

Example minimal strategy:

```python
# app/income_strategies/my_strategy/main.py
from app.income_strategies.strategy_base import IncomeStrategy

class MyStrategy(IncomeStrategy):
    """
    My custom income generation strategy.
    """

    # Strategy metadata
    STRATEGY_NAME = "My Strategy"
    STRATEGY_DESCRIPTION = "Description of my strategy"

    # Run every 2 hours
    run_interval = 120

    def _initialize(self) -> None:
        """
        Initialize strategy resources.
        """
        # Your initialization code here
        self.log_info("Initialized my strategy")

    def run(self) -> Dict[str, Any]:
        """
        Execute the strategy.

        Returns:
            Dictionary with execution results
        """
        try:
            # Your strategy implementation here

            return {
                'success': True,
                'income': amount_earned,
                'currency': 'USD',
                'description': 'Income from my strategy',
                'details': {}
            }

        except Exception as e:
            self.log_error(f"Error executing my strategy: {str(e)}")
            return {
                'success': False,
                'income': 0,
                'currency': 'USD',
                'description': 'Strategy execution failed',
                'details': {'error': str(e)}
            }
```

### Adding a Site Interactor

1. Create a new file under `app/web/site_interactors/` for your site
2. Create a class that implements the required interaction methods
3. Use it in your strategy

Example:

```python
# app/web/site_interactors/my_site.py
import logging
import time
from typing import Dict, Any, Optional

class MySiteInteractor:
    """
    Utilities for interacting with MySite.com.
    """

    def __init__(self, browser_manager, captcha_solver, config):
        """
        Initialize the site interactor.
        """
        self.browser_manager = browser_manager
        self.captcha_solver = captcha_solver
        self.config = config
        self.logger = logging.getLogger(__name__)

        # Load credentials
        self.credentials = self.config.get_website_credentials("MYSITE")

    def login(self, browser) -> bool:
        """
        Log in to the site.
        """
        try:
            # Your login implementation here
            return True
        except Exception as e:
            self.logger.error(f"Error logging in: {str(e)}")
            return False

    # Additional methods as needed
```

## Troubleshooting

### Common Issues

#### Browser Automation Failures

**Symptoms:** Browser crashes, elements not found, "Element is not clickable" errors

**Solutions:**
- Update Chrome and ChromeDriver to the latest versions
- Try disabling headless mode for debugging: `WEB_AUTOMATION_HEADLESS=false`
- Increase wait times: `WEB_AUTOMATION_WAIT_TIMEOUT=30`
- Check if the website structure has changed and update selectors

#### API Rate Limiting

**Symptoms:** Frequent API errors, strategies failing due to API errors

**Solutions:**
- Increase API rate limit delay: `LLM_API_RATE_LIMIT_DELAY=5.0`
- Use multiple API providers and balance load between them
- Implement exponential backoff for API retries

#### Database Connection Issues

**Symptoms:** "Can't connect to MySQL server", "Access denied" errors

**Solutions:**
- Verify database server is running: `systemctl status mysql`
- Check credentials in `.env` file
- Verify network connectivity to database server
- Check database user permissions

#### Strategy-specific Issues

**Content Creation:**
- Ensure API keys have sufficient permissions for content generation
- Verify platform credentials are correct
- Check if platforms have changed their login process or content submission forms

**Freelancing:**
- Verify Upwork account is in good standing and has completed profile
- Check if there are sufficient funds for bidding fees
- Ensure the types of jobs specified match your profile skills

**Paid Surveys:**
- Verify survey platform accounts are fully set up and verified
- Check persona data for consistency
- Ensure the browser is properly configured to handle survey sites

### Viewing Logs

Application logs are stored in the `logs/` directory by date. View them with:

```bash
tail -f logs/$(date +%Y-%m-%d).log
```

For database logs:

```bash
tail -f /var/log/mysql/error.log
```

### Running Tests

Run the test suite to verify everything is working correctly:

```bash
python -m app.tests.run_tests
```

Run individual test modules:

```bash
python -m unittest app.tests.test_config
```

## Frequently Asked Questions

**Q: How much income can I expect to generate?**

A: Income varies widely based on many factors including your account history on platforms, available opportunities, and strategy configuration. Most users start seeing small amounts ($5-20 per week) that grow over time as the application optimizes its strategies.

**Q: Is this legal to use?**

A: The application automates tasks you could do manually, but you should review each platform's Terms of Service. Some platforms explicitly prohibit automation. Use at your own discretion and legal risk.

**Q: Will this affect my accounts on these platforms?**

A: Potentially yes. While the application uses anti-detection measures, excessive automation can sometimes trigger account reviews. Consider using separate accounts specifically for this purpose.

**Q: How can I maximize income?**

A: Configure all available strategies, provide accurate credentials, use high-quality LLM APIs, and let the application run continuously to optimize its performance over time.

**Q: Can I run this on a Raspberry Pi or low-powered device?**

A: Yes, but with limitations. Browser automation is resource-intensive. For low-powered devices, consider disabling the more resource-heavy strategies or running them less frequently.

## Legal and Ethical Considerations

### Terms of Service

Most platforms prohibit automation in their Terms of Service. Using this application may violate these terms and could result in account suspensions or bans. Review the Terms of Service for each platform before using this application.

### Data Privacy

The application stores credentials and personal information. Ensure you're complying with relevant data protection regulations (GDPR, CCPA, etc.) if storing data of others.

### Content Rights

When using the Content Creation strategy, be aware that:
- Content generated by AI may have unclear copyright status
- Some platforms have specific rules about AI-generated content
- Always disclose AI-generated content when required by platforms

### Tax Implications

Income generated through this application may be taxable. Consult with a tax professional regarding reporting requirements in your jurisdiction.

### Ethical Use

Use this application ethically:
- Don't use it to spam platforms or submit low-quality work
- Don't use it to circumvent platform rules designed to protect other users
- Consider the impact on the platforms and other users

### Disclaimer

This application is provided as-is with no guarantees. The developers are not responsible for any consequences of its use, including but not limited to account bans, financial losses, or legal issues.